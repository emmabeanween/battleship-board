{"ast":null,"code":"var _jsxFileName = \"/Users/emma/Documents/battleship-board/src/BattleshipBoard.js\";\nimport React, { useState } from 'react';\nimport Square from './Square'; // ideas for <Square \n// generate 100 <Square space=shipLengths[0]/>, <Square space=shipLengths[1]/>\n// \n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass BattleshipBoard extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.shipGuess = userGuess => {// update userGuesses here\n    };\n\n    this.generateShip = () => {\n      // generate a random number between 2 and 5 inclusive - 2, 3, 3, 4, 5 are the ship lengths\n      const randNum = Math.floor(Math.random() * (5 - 2 + 1)) + 2; // check ship lengths\n\n      var shipLengths = this.state.shipPositions.slice(); // see if ship Length is already in ship\n\n      if (shipLength.indexOf(randNum) > -1) {\n        // if number is 2, 4, 5\n        if (randNum == 3) {\n          // see if there is more than one '3' in the array\n          var count = 0;\n\n          for (num of shipLengths) {\n            if (num == 3) {\n              count++;\n            }\n          }\n\n          if (count > 1) {\n            this.generateShip();\n          } else {\n            // generate a ship that is of length 3\n            const shipStart = Math.floor(Math.random() * (100 - 0 + 1)) + 0;\n            this.generateVertical(3, randNum);\n          }\n        } else {\n          this.generateShip();\n        }\n      } else {\n        // generate a ship that is of length 2, 3, 4, or 5\n        const shipStart = Math.floor(Math.random() * (100 - 0 + 1)) + 0;\n        this.generateVertical(randNum, shipStart);\n      }\n    };\n\n    this.generateVertical = (shipLength, shipStart) => {\n      var verticalShip = []; // generate a vetical ship\n\n      if (shipStart + (10 * shipLength - 10) > 100) {\n        // the ship will go off the board if generating south\n        // build ship up\n        for (var i = 0; i < shipLength; i++) {\n          if (i == 0) {\n            verticalShip.push(shipStart);\n          } else {\n            shipStart = shipStart - 10;\n            verticalShip.push(shipStart);\n          }\n        }\n      } else {\n        // generate vertical ship down\n        for (var i = 0; i < shipLength; i++) {\n          if (i == 0) {\n            verticalShip.push(shipStart);\n          } else {\n            shipStart = shipStart + 10;\n            verticalShip.push(shipStart);\n          }\n        }\n      }\n\n      var shipPositions = this.state.shipPositions.slice();\n      var alreadyGenerated = false;\n\n      for (var i = 0; i < verticalShip.length; i++) {\n        if (shipPositions.indexOf(verticalShip[i]) > -1) {\n          alreadyGenerated = true;\n        }\n      } // check alreadyGenerated\n\n\n      if (alreadyGenerated == true) {\n        this.generateVertical(shipLength, shipStart); // generate a ship again\n      } else {\n        // append to shipPositions\n        for (var i = 0; i < verticalShip.length; i++) {\n          shipPositions.push(verticalShip[i]);\n          this.setState({\n            shipPositions: shipPositions\n          });\n        }\n\n        alert(shipPositions);\n      }\n    };\n\n    this.state = {\n      shipPositions: [],\n      shipLengths: [],\n      userGuesses: []\n    }; // pass this in to UserSquare\n  }\n\n  //generate either zero or one\n  //var randNum = Math.floor(Math.random() * (1 - 0 + 1)) + 0;\n  // generate a vertical ship\n  // generate an random number between 1 and 100, inclusive\n  //  var shipStart = Math.floor(Math.random() * (100 - 1 + 1) + 1);\n  //  var shipLength = Math.floor(Math.random() * (5 - 2 + 1) + 2);\n  // \tvar shipLengths = this.state.shipLengths.slice();\n  //  \tif (shipLength == 3){\n  // if appears twice\n  //\tvar count = 0;\n  // shipLengths.forEach(element => {\n  // if (element === 3) {\n  //  count += 1;\n  // }});\n  // if (count == 2){\n  //\tthis.generateShip();\n  //  }\n  //  else {\n  //  shipLengths.push(shipLength);\n  // this.setState({shipLengths: shipLengths});\n  // this.generateVertical(shipLength, shipStart);\n  // }\n  // \t}\n  //\telse {\n  // if (shipLengths.indexOf(shipLength) > -1){\n  //\t\tthis.generateShip();\n  //  \t}\n  //  \telse {\n  //  \tshipLengths.push(shipLength);\n  //  \tthis.setState({shipLengths: shipLengths});\n  // add a ship \n  // \tthis.generateVertical(shipLength, shipStart);\n  // \t}\n  // \t}\n  //}\n  // generate random number between 1 and 100, inclusive: var randNum = ...\n  // if randNum + ((10*length) - (10)) > 100: build ship up\n  // var verticalShip = [];               \n  // for (var i = 0; i < length; i++ ) { if (i=0){ verticalShip.append(randNum)} else{  randNum = randNum - 10 verticalShip.append(randNum)       }           }\n  // same for building the ship down, except randNum = randNum + 10\n  // check that none of the generated numbers are in the current position\n  // const shipPositions = this.state.shipPositions.slice();\n  // for (var i = 0; i < verticalShip.length; i++){ if shipPositions.index(verticalShip[i]) > -1} this.generateVertical(length); else{\n  // for (var i= 0; i < verticalShip....){shipPositions.append(verticalShip[i])}\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [this.state.shipPositions, /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.generateShip,\n        children: \"Click me\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default BattleshipBoard;","map":{"version":3,"sources":["/Users/emma/Documents/battleship-board/src/BattleshipBoard.js"],"names":["React","useState","Square","BattleshipBoard","Component","constructor","props","shipGuess","userGuess","generateShip","randNum","Math","floor","random","shipLengths","state","shipPositions","slice","shipLength","indexOf","count","num","shipStart","generateVertical","verticalShip","i","push","alreadyGenerated","length","setState","alert","userGuesses","render"],"mappings":"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","sourcesContent":["\nimport React, { useState } from 'react';\nimport Square from './Square';\n\n\n// ideas for <Square \n// generate 100 <Square space=shipLengths[0]/>, <Square space=shipLengths[1]/>\n// \n\nclass BattleshipBoard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {shipPositions: [], shipLengths: [], userGuesses: []}\n    // pass this in to UserSquare\n  }\n\n  shipGuess = (userGuess) => {\n      \n      // update userGuesses here\n\n\n\n  }\n\n\n generateShip = () => {\n// generate a random number between 2 and 5 inclusive - 2, 3, 3, 4, 5 are the ship lengths\nconst randNum = Math.floor(Math.random() * (5 - 2 + 1)) + 2;\n// check ship lengths\nvar shipLengths = this.state.shipPositions.slice();\n// see if ship Length is already in ship\nif (shipLength.indexOf(randNum) > -1){\n\n// if number is 2, 4, 5\nif (randNum == 3){\n\t// see if there is more than one '3' in the array\n\n\tvar count = 0;\n\tfor (num of shipLengths ) {\n  if (num == 3) {\n        count++;\n    }\n}\n\n\n\n\n\tif (count > 1){\n\t\tthis.generateShip();\n\n\t} \n\n\telse {\n\n        // generate a ship that is of length 3\n        const shipStart = Math.floor(Math.random() * (100 - 0 + 1)) + 0;\n        this.generateVertical(3, randNum);\n\n\n\t}\n\n}\nelse {\n\n\tthis.generateShip();\n}\n\n\n}\n\nelse {\n\n// generate a ship that is of length 2, 3, 4, or 5\n const shipStart = Math.floor(Math.random() * (100 - 0 + 1)) + 0;\n this.generateVertical(randNum, shipStart);\n\n}\n}\n\n\ngenerateVertical = (shipLength, shipStart) => {\n\n\n\n\n  \n var verticalShip = [];\n       // generate a vetical ship\n       if (shipStart + ((10 * shipLength) - (10)) > 100 ) {\n\n        \n        // the ship will go off the board if generating south\n        // build ship up\n\n     \n        \n\n        for (var i = 0; i < shipLength; i++){\n\n              if (i == 0){\n               verticalShip.push(shipStart);\n\n             }\n             else {\n\n                shipStart = shipStart - 10;\n                verticalShip.push(shipStart);\n                \n             }\n\n        }\n\n    }\n\n    else {\n\n        // generate vertical ship down\n        \n\n        for (var i = 0; i < shipLength; i++){\n\n              if (i == 0){\n               verticalShip.push(shipStart);\n\n             }\n             else {\n\n                shipStart = shipStart + 10;\n                verticalShip.push(shipStart);\n                \n             }\n\n        }\n\n\n\n    }\n\n\n\nvar shipPositions = this.state.shipPositions.slice();\nvar alreadyGenerated = false;\n        for (var i = 0; i < verticalShip.length; i++){\n        \tif (shipPositions.indexOf(verticalShip[i]) > -1){\n        \t\talreadyGenerated = true;\n        \t}\n\n        }\n\n        // check alreadyGenerated\n\n        if (alreadyGenerated == true){\n   \n        \tthis.generateVertical(shipLength, shipStart); // generate a ship again\n        }\n\n        else {\n\n        \t// append to shipPositions\n\n        for (var i = 0; i < verticalShip.length; i++){\n\n\tshipPositions.push(verticalShip[i]);\n\tthis.setState({shipPositions: shipPositions});\n}\n\nalert(shipPositions);\n\n\n       \t\n      \n       }\n\n\n\n}\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n  //generate either zero or one\n       //var randNum = Math.floor(Math.random() * (1 - 0 + 1)) + 0;\n       \n       // generate a vertical ship\n       // generate an random number between 1 and 100, inclusive\n     //  var shipStart = Math.floor(Math.random() * (100 - 1 + 1) + 1);\n     //  var shipLength = Math.floor(Math.random() * (5 - 2 + 1) + 2);\n      // \tvar shipLengths = this.state.shipLengths.slice();\n     //  \tif (shipLength == 3){\n\n       \t\t// if appears twice\n       \t//\tvar count = 0;\n\n        // shipLengths.forEach(element => {\n       // if (element === 3) {\n        //  count += 1;\n        // }});\n          \n       // if (count == 2){\n\n        //\tthis.generateShip();\n      //  }\n\n      //  else {\n  \n        //  shipLengths.push(shipLength);\n         // this.setState({shipLengths: shipLengths});\n         // this.generateVertical(shipLength, shipStart);\n\n       // }\n         \n\n\n      // \t}\n\n       //\telse {\n\n       // if (shipLengths.indexOf(shipLength) > -1){\n       //\t\tthis.generateShip();\n     //  \t}\n\n     //  \telse {\n\n     //  \tshipLengths.push(shipLength);\n     //  \tthis.setState({shipLengths: shipLengths});\n       \t// add a ship \n      // \tthis.generateVertical(shipLength, shipStart);\n\n\n      // \t}\n\n      // \t}\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//}\n\n\n \n\n\n\n\n\n\n\n\n\n     // generate random number between 1 and 100, inclusive: var randNum = ...\n// if randNum + ((10*length) - (10)) > 100: build ship up\n// var verticalShip = [];               \n// for (var i = 0; i < length; i++ ) { if (i=0){ verticalShip.append(randNum)} else{  randNum = randNum - 10 verticalShip.append(randNum)       }           }\n// same for building the ship down, except randNum = randNum + 10\n// check that none of the generated numbers are in the current position\n// const shipPositions = this.state.shipPositions.slice();\n// for (var i = 0; i < verticalShip.length; i++){ if shipPositions.index(verticalShip[i]) > -1} this.generateVertical(length); else{\n// for (var i= 0; i < verticalShip....){shipPositions.append(verticalShip[i])}\n  \n\n\n\n  render() {\n    return (\n      <div>\n      {this.state.shipPositions}\n        <button onClick={this.generateShip}>\n          Click me\n        </button>\n\n\n\n\n\n\n\n\n      </div>\n    );\n  }\n}\n\n\nexport default BattleshipBoard;"]},"metadata":{},"sourceType":"module"}