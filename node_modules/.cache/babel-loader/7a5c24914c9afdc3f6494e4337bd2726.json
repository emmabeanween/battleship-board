{"ast":null,"code":"var _jsxFileName = \"/Users/emma/Documents/battleship-board/src/BattleshipBoard.js\";\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass BattleshipBoard extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.shipGuess = userGuess => {// update userGuesses here\n    };\n\n    this.generateShip = () => {\n      //generate either zero or one\n      var randNum = Math.floor(Math.random() * (1 - 0 + 1)) + 0;\n\n      if (randNum == 1) {\n        // generate a vertical ship\n        // generate an random number between 1 and 100, inclusive\n        var shipStart = Math.floor(Math.random() * (100 - 1 + 1) + 1);\n        var shipLength = Math.floor(Math.random() * (5 - 2 + 1) + 2); // check that ship length has not already been generated\n        // check that shipLength doesn't already exist in the array\n        // generate 2, 3, 4, 5 ships (four ships to start)\n\n        var shipLengths = this.state.shipLengths.slice();\n\n        if (shipLengths.indexOf(shipLength) > -1) {\n          alert(this.state.shipPositions.slice());\n          this.generateShip();\n        } else {\n          shipLengths.push(shipLength);\n          this.setState({\n            shipLengths: shipLengths\n          });\n        }\n\n        if (shipStart + (10 * shipLength - 10) > 100) {\n          // the ship will go off the board if generating south\n          // build ship up\n          var verticalShip = [];\n\n          for (var i = 0; i < shipLength; i++) {\n            if (i == 0) {\n              verticalShip.push(shipStart);\n            } else {\n              shipStart = shipStart - 10;\n              verticalShip.push(shipStart);\n            }\n          } // append the new ship to shipPositions, if not already in shipPositions\n\n\n          var shipPositions = this.state.shipPositions.slice();\n          var alreadyGenerated = false;\n\n          for (var i = 0; i < verticalShip.length; i++) {\n            if (shipPositions.indexOf(verticalShip[i]) > -1) {\n              alreadyGenerated = true;\n            }\n          } // check alreadyGenerated\n\n\n          if (alreadyGenerated == true) {\n            this.generateShip(); // generate a ship again\n          } else {\n            // append to shipPositions\n            for (var i = 0; i < verticalShip.length; i++) {\n              shipPositions.push(verticalShip[i]);\n            }\n\n            this.setState({\n              shipPositions: shipPositions\n            });\n          }\n        } else {\n          // build ship down (south)\n          var verticalShip = [];\n\n          for (var i = 0; i < shipLength; i++) {\n            if (i == 0) {\n              verticalShip.push(shipStart);\n            } else {\n              shipStart = shipStart + 10;\n              verticalShip.push(shipStart);\n            }\n          } // append the new ship to shipPositions, if not already in shipPositions\n\n\n          var shipPositions = this.state.shipPositions.slice();\n          var alreadyGenerated = false;\n\n          for (var i = 0; i < verticalShip.length; i++) {\n            if (shipPositions.indexOf(verticalShip[i]) > -1) {\n              alreadyGenerated = true;\n            }\n          } // check alreadyGenerated\n\n\n          if (alreadyGenerated == true) {\n            this.generateShip(); // generate a ship again\n          } else {\n            // append to shipPositions\n            for (var i = 0; i < verticalShip.length; i++) {\n              shipPositions.push(verticalShip[i]);\n            }\n\n            this.setState({\n              shipPositions: shipPositions\n            });\n          }\n        }\n      } else {\n        // randNum == 0\n        // build horizontal ship\n        this.generateShip();\n      } // generate random number between 1 and 100, inclusive: var randNum = ...\n      // if randNum + ((10*length) - (10)) > 100: build ship up\n      // var verticalShip = [];               \n      // for (var i = 0; i < length; i++ ) { if (i=0){ verticalShip.append(randNum)} else{  randNum = randNum - 10 verticalShip.append(randNum)       }           }\n      // same for building the ship down, except randNum = randNum + 10\n      // check that none of the generated numbers are in the current position\n      // const shipPositions = this.state.shipPositions.slice();\n      // for (var i = 0; i < verticalShip.length; i++){ if shipPositions.index(verticalShip[i]) > -1} this.generateVertical(length); else{\n      // for (var i= 0; i < verticalShip....){shipPositions.append(verticalShip[i])}\n\n    };\n\n    this.state = {\n      shipPositions: [],\n      shipLengths: [],\n      userGuesses: []\n    }; // pass this in to UserSquare\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [this.state.shipPositions, /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.generateShip,\n        children: \"Click me\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default BattleshipBoard;","map":{"version":3,"sources":["/Users/emma/Documents/battleship-board/src/BattleshipBoard.js"],"names":["React","useState","BattleshipBoard","Component","constructor","props","shipGuess","userGuess","generateShip","randNum","Math","floor","random","shipStart","shipLength","shipLengths","state","slice","indexOf","alert","shipPositions","push","setState","verticalShip","i","alreadyGenerated","length","userGuesses","render"],"mappings":";AACA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;AAEA,MAAMC,eAAN,SAA8BF,KAAK,CAACG,SAApC,CAA8C;AAC5CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAMnBC,SANmB,GAMNC,SAAD,IAAe,CAEvB;AAIH,KAZkB;;AAAA,SAcnBC,YAdmB,GAcJ,MAAM;AAEnB;AACA,UAAIC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiB,IAAI,CAAJ,GAAQ,CAAzB,CAAX,IAA0C,CAAxD;;AACA,UAAIH,OAAO,IAAI,CAAf,EAAiB;AAEd;AACA;AACA,YAAII,SAAS,GAAGH,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiB,MAAM,CAAN,GAAU,CAA3B,IAAgC,CAA3C,CAAhB;AACA,YAAIE,UAAU,GAAGJ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiB,IAAI,CAAJ,GAAQ,CAAzB,IAA8B,CAAzC,CAAjB,CALc,CAQd;AAIC;AACA;;AACA,YAAIG,WAAW,GAAG,KAAKC,KAAL,CAAWD,WAAX,CAAuBE,KAAvB,EAAlB;;AACA,YAAIF,WAAW,CAACG,OAAZ,CAAoBJ,UAApB,IAAkC,CAAC,CAAvC,EAAyC;AACrCK,UAAAA,KAAK,CAAC,KAAKH,KAAL,CAAWI,aAAX,CAAyBH,KAAzB,EAAD,CAAL;AACH,eAAKT,YAAL;AACA,SAHD,MAIK;AACLO,UAAAA,WAAW,CAACM,IAAZ,CAAiBP,UAAjB;AACA,eAAKQ,QAAL,CAAc;AAACP,YAAAA,WAAW,EAAEA;AAAd,WAAd;AACC;;AAOF,YAAIF,SAAS,IAAK,KAAKC,UAAN,GAAqB,EAAzB,CAAT,GAAyC,GAA7C,EAAmD;AAGlD;AACA;AAEA,cAAIS,YAAY,GAAG,EAAnB;;AAGA,eAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,UAApB,EAAgCU,CAAC,EAAjC,EAAoC;AAE9B,gBAAIA,CAAC,IAAI,CAAT,EAAW;AACVD,cAAAA,YAAY,CAACF,IAAb,CAAkBR,SAAlB;AAED,aAHA,MAII;AAEJA,cAAAA,SAAS,GAAGA,SAAS,GAAG,EAAxB;AACAU,cAAAA,YAAY,CAACF,IAAb,CAAkBR,SAAlB;AAEA;AAEL,WAtBiD,CAyBlD;;;AACA,cAAIO,aAAa,GAAG,KAAKJ,KAAL,CAAWI,aAAX,CAAyBH,KAAzB,EAApB;AACA,cAAIQ,gBAAgB,GAAG,KAAvB;;AACA,eAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,YAAY,CAACG,MAAjC,EAAyCF,CAAC,EAA1C,EAA6C;AAC5C,gBAAIJ,aAAa,CAACF,OAAd,CAAsBK,YAAY,CAACC,CAAD,CAAlC,IAAyC,CAAC,CAA9C,EAAgD;AAC/CC,cAAAA,gBAAgB,GAAG,IAAnB;AACA;AAED,WAjCiD,CAmClD;;;AAEA,cAAIA,gBAAgB,IAAI,IAAxB,EAA6B;AAE5B,iBAAKjB,YAAL,GAF4B,CAEP;AACrB,WAHD,MAKK;AAEJ;AAGA,iBAAK,IAAIgB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,YAAY,CAACG,MAAjC,EAAyCF,CAAC,EAA1C,EAA6C;AAE5CJ,cAAAA,aAAa,CAACC,IAAd,CAAmBE,YAAY,CAACC,CAAD,CAA/B;AACA;;AACD,iBAAKF,QAAL,CAAc;AAACF,cAAAA,aAAa,EAAEA;AAAhB,aAAd;AACA;AAID,SAxDD,MA0DK;AAEJ;AAIA,cAAIG,YAAY,GAAG,EAAnB;;AAGA,eAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,UAApB,EAAgCU,CAAC,EAAjC,EAAoC;AAE9B,gBAAIA,CAAC,IAAI,CAAT,EAAW;AACVD,cAAAA,YAAY,CAACF,IAAb,CAAkBR,SAAlB;AAED,aAHA,MAII;AAEJA,cAAAA,SAAS,GAAGA,SAAS,GAAG,EAAxB;AACAU,cAAAA,YAAY,CAACF,IAAb,CAAkBR,SAAlB;AAEA;AAEL,WAtBG,CAyBJ;;;AACA,cAAIO,aAAa,GAAG,KAAKJ,KAAL,CAAWI,aAAX,CAAyBH,KAAzB,EAApB;AACA,cAAIQ,gBAAgB,GAAG,KAAvB;;AACA,eAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,YAAY,CAACG,MAAjC,EAAyCF,CAAC,EAA1C,EAA6C;AAC5C,gBAAIJ,aAAa,CAACF,OAAd,CAAsBK,YAAY,CAACC,CAAD,CAAlC,IAAyC,CAAC,CAA9C,EAAgD;AAC/CC,cAAAA,gBAAgB,GAAG,IAAnB;AACA;AAED,WAjCG,CAmCJ;;;AAEA,cAAIA,gBAAgB,IAAI,IAAxB,EAA6B;AAE5B,iBAAKjB,YAAL,GAF4B,CAEP;AACrB,WAHD,MAKK;AAEJ;AAEA,iBAAK,IAAIgB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,YAAY,CAACG,MAAjC,EAAyCF,CAAC,EAA1C,EAA6C;AAE5CJ,cAAAA,aAAa,CAACC,IAAd,CAAmBE,YAAY,CAACC,CAAD,CAA/B;AACA;;AACD,iBAAKF,QAAL,CAAc;AAACF,cAAAA,aAAa,EAAEA;AAAhB,aAAd;AACA;AA+BD;AAIH,OA7KD,MA+KK;AACD;AACA;AACH,aAAKZ,YAAL;AACA,OAvLkB,CAiMlB;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAyBG,KAhPkB;;AAEjB,SAAKQ,KAAL,GAAa;AAACI,MAAAA,aAAa,EAAE,EAAhB;AAAoBL,MAAAA,WAAW,EAAE,EAAjC;AAAqCY,MAAAA,WAAW,EAAE;AAAlD,KAAb,CAFiB,CAGjB;AACD;;AA8ODC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,iBACC,KAAKZ,KAAL,CAAWI,aADZ,eAEE;AAAQ,QAAA,OAAO,EAAE,KAAKZ,YAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAQD;;AA5P2C;;AAgQ9C,eAAeN,eAAf","sourcesContent":["\nimport React, { useState } from 'react';\n\nclass BattleshipBoard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {shipPositions: [], shipLengths: [], userGuesses: []}\n    // pass this in to UserSquare\n  }\n\n  shipGuess = (userGuess) => {\n      \n      // update userGuesses here\n\n\n\n  }\n\n  generateShip = () => {\n     \n    //generate either zero or one\n    var randNum = Math.floor(Math.random() * (1 - 0 + 1)) + 0;\n    if (randNum == 1){\n       \n       // generate a vertical ship\n       // generate an random number between 1 and 100, inclusive\n       var shipStart = Math.floor(Math.random() * (100 - 1 + 1) + 1);\n       var shipLength = Math.floor(Math.random() * (5 - 2 + 1) + 2);\n      \n    \n       // check that ship length has not already been generated\n      \n \n       \n       \t// check that shipLength doesn't already exist in the array\n       \t// generate 2, 3, 4, 5 ships (four ships to start)\n       \tvar shipLengths = this.state.shipLengths.slice();\n       \tif (shipLengths.indexOf(shipLength) > -1){\n            alert(this.state.shipPositions.slice());\n       \t\tthis.generateShip();\n       \t}\n       \telse {\n       \tshipLengths.push(shipLength);\n       \tthis.setState({shipLengths: shipLengths});\n       \t}\n\n\n\n       \t\n\n\n       if (shipStart + ((10 * shipLength) - (10)) > 100 ) {\n\n        \n        // the ship will go off the board if generating south\n        // build ship up\n\n        var verticalShip = [];\n        \n\n        for (var i = 0; i < shipLength; i++){\n\n              if (i == 0){\n               verticalShip.push(shipStart);\n\n             }\n             else {\n\n             \tshipStart = shipStart - 10;\n             \tverticalShip.push(shipStart);\n             \t\n             }\n\n        }\n\n        \n        // append the new ship to shipPositions, if not already in shipPositions\n        var shipPositions = this.state.shipPositions.slice();\n        var alreadyGenerated = false;\n        for (var i = 0; i < verticalShip.length; i++){\n        \tif (shipPositions.indexOf(verticalShip[i]) > -1){\n        \t\talreadyGenerated = true;\n        \t}\n\n        }\n\n        // check alreadyGenerated\n\n        if (alreadyGenerated == true){\n   \n        \tthis.generateShip(); // generate a ship again\n        }\n\n        else {\n\n        \t// append to shipPositions\n\n           \n        \tfor (var i = 0; i < verticalShip.length; i++){\n\n        \t\tshipPositions.push(verticalShip[i]);\n        \t}\n        \tthis.setState({shipPositions: shipPositions});\n        }\n     \n       \n\n       }\n\n       else {\n\n       \t// build ship down (south)\n       \t\n\n       \n        var verticalShip = [];\n        \n\n        for (var i = 0; i < shipLength; i++){\n\n              if (i == 0){\n               verticalShip.push(shipStart);\n\n             }\n             else {\n\n             \tshipStart = shipStart + 10;\n             \tverticalShip.push(shipStart);\n             \t\n             }\n\n        }\n\n        \n        // append the new ship to shipPositions, if not already in shipPositions\n        var shipPositions = this.state.shipPositions.slice();\n        var alreadyGenerated = false;\n        for (var i = 0; i < verticalShip.length; i++){\n        \tif (shipPositions.indexOf(verticalShip[i]) > -1){\n        \t\talreadyGenerated = true;\n        \t}\n\n        }\n\n        // check alreadyGenerated\n\n        if (alreadyGenerated == true){\n   \n        \tthis.generateShip(); // generate a ship again\n        }\n\n        else {\n\n        \t// append to shipPositions\n\n        \tfor (var i = 0; i < verticalShip.length; i++){\n\n        \t\tshipPositions.push(verticalShip[i]);\n        \t}\n        \tthis.setState({shipPositions: shipPositions});\n        }\n     \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \t\n      \n       }\n     \n\n\n    }\n\n    else {\n        // randNum == 0\n        // build horizontal ship\n    \tthis.generateShip();\n    }\n\n\n\n\n\n\n\n\n\n     // generate random number between 1 and 100, inclusive: var randNum = ...\n// if randNum + ((10*length) - (10)) > 100: build ship up\n// var verticalShip = [];               \n// for (var i = 0; i < length; i++ ) { if (i=0){ verticalShip.append(randNum)} else{  randNum = randNum - 10 verticalShip.append(randNum)       }           }\n// same for building the ship down, except randNum = randNum + 10\n// check that none of the generated numbers are in the current position\n// const shipPositions = this.state.shipPositions.slice();\n// for (var i = 0; i < verticalShip.length; i++){ if shipPositions.index(verticalShip[i]) > -1} this.generateVertical(length); else{\n// for (var i= 0; i < verticalShip....){shipPositions.append(verticalShip[i])}\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  }\n\n  render() {\n    return (\n      <div>\n      {this.state.shipPositions}\n        <button onClick={this.generateShip}>\n          Click me\n        </button>\n      </div>\n    );\n  }\n}\n\n\nexport default BattleshipBoard;"]},"metadata":{},"sourceType":"module"}