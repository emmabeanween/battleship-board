{"ast":null,"code":"var _jsxFileName = \"/Users/emma/Documents/battleship-board/src/BattleshipBoard.js\";\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass BattleshipBoard extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.shipGuess = userGuess => {// update userGuesses here\n    };\n\n    this.generateVertical = (shipLength, shipStart) => {\n      var verticalShip = []; // generate a vetical ship\n\n      if (shipStart + (10 * shipLength - 10) > 100) {\n        // the ship will go off the board if generating south\n        // build ship up\n        for (var i = 0; i < shipLength; i++) {\n          if (i == 0) {\n            verticalShip.push(shipStart);\n          } else {\n            shipStart = shipStart - 10;\n            verticalShip.push(shipStart);\n          }\n        }\n      } else {\n        // generate vertical ship down\n        for (var i = 0; i < shipLength; i++) {\n          if (i == 0) {\n            verticalShip.push(shipStart);\n          } else {\n            shipStart = shipStart + 10;\n            verticalShip.push(shipStart);\n          }\n        }\n      }\n\n      alert(verticalShip);\n    };\n\n    this.generateShip = () => {\n      //generate either zero or one\n      var randNum = Math.floor(Math.random() * (1 - 0 + 1)) + 0; // generate a vertical ship\n      // generate an random number between 1 and 100, inclusive\n\n      var shipStart = Math.floor(Math.random() * (100 - 1 + 1) + 1);\n      var shipLength = Math.floor(Math.random() * (5 - 2 + 1) + 2);\n      var shipLengths = this.state.shipLengths.slice();\n\n      if (shipLength == 3) {\n        // if appears twice\n        var count = 0;\n        shipLengths.forEach(element => {\n          if (element === 3) {\n            count += 1;\n          }\n        });\n\n        if (count == 2) {\n          this.generateShip();\n        } else {\n          shipLengths.push(shipLength);\n          this.setState({\n            shipLengths: shipLengths\n          });\n          this.generateVertical(shipLength, shipStart);\n        }\n      } else {\n        if (shipLengths.indexOf(shipLength) > -1) {\n          this.generateShip();\n        } else {\n          shipLengths.push(shipLength);\n          this.setState({\n            shipLengths: shipLengths\n          }); // add a ship \n\n          this.generateVertical(shipLength, shipStart);\n        }\n      }\n    };\n\n    this.state = {\n      shipPositions: [],\n      shipLengths: [],\n      userGuesses: []\n    }; // pass this in to UserSquare\n  }\n\n  // generate random number between 1 and 100, inclusive: var randNum = ...\n  // if randNum + ((10*length) - (10)) > 100: build ship up\n  // var verticalShip = [];               \n  // for (var i = 0; i < length; i++ ) { if (i=0){ verticalShip.append(randNum)} else{  randNum = randNum - 10 verticalShip.append(randNum)       }           }\n  // same for building the ship down, except randNum = randNum + 10\n  // check that none of the generated numbers are in the current position\n  // const shipPositions = this.state.shipPositions.slice();\n  // for (var i = 0; i < verticalShip.length; i++){ if shipPositions.index(verticalShip[i]) > -1} this.generateVertical(length); else{\n  // for (var i= 0; i < verticalShip....){shipPositions.append(verticalShip[i])}\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [this.state.shipLengths, /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.generateShip,\n        children: \"Click me\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default BattleshipBoard;","map":{"version":3,"sources":["/Users/emma/Documents/battleship-board/src/BattleshipBoard.js"],"names":["React","useState","BattleshipBoard","Component","constructor","props","shipGuess","userGuess","generateVertical","shipLength","shipStart","verticalShip","i","push","alert","generateShip","randNum","Math","floor","random","shipLengths","state","slice","count","forEach","element","setState","indexOf","shipPositions","userGuesses","render"],"mappings":"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","sourcesContent":["\nimport React, { useState } from 'react';\n\nclass BattleshipBoard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {shipPositions: [], shipLengths: [], userGuesses: []}\n    // pass this in to UserSquare\n  }\n\n  shipGuess = (userGuess) => {\n      \n      // update userGuesses here\n\n\n\n  }\n\ngenerateVertical = (shipLength, shipStart) => {\n\n\n\n\n  \n var verticalShip = [];\n       // generate a vetical ship\n       if (shipStart + ((10 * shipLength) - (10)) > 100 ) {\n\n        \n        // the ship will go off the board if generating south\n        // build ship up\n\n     \n        \n\n        for (var i = 0; i < shipLength; i++){\n\n              if (i == 0){\n               verticalShip.push(shipStart);\n\n             }\n             else {\n\n                shipStart = shipStart - 10;\n                verticalShip.push(shipStart);\n                \n             }\n\n        }\n\n    }\n\n    else {\n\n        // generate vertical ship down\n        \n\n        for (var i = 0; i < shipLength; i++){\n\n              if (i == 0){\n               verticalShip.push(shipStart);\n\n             }\n             else {\n\n                shipStart = shipStart + 10;\n                verticalShip.push(shipStart);\n                \n             }\n\n        }\n\n\n\n    }\n\n\n\n\n\nalert(verticalShip);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   }  \n\n\n  generateShip = () => {\n     \n\n\n  //generate either zero or one\n       var randNum = Math.floor(Math.random() * (1 - 0 + 1)) + 0;\n       \n       // generate a vertical ship\n       // generate an random number between 1 and 100, inclusive\n       var shipStart = Math.floor(Math.random() * (100 - 1 + 1) + 1);\n       var shipLength = Math.floor(Math.random() * (5 - 2 + 1) + 2);\n       \tvar shipLengths = this.state.shipLengths.slice();\n       \tif (shipLength == 3){\n\n       \t\t// if appears twice\n       \t\tvar count = 0;\n\n         shipLengths.forEach(element => {\n        if (element === 3) {\n          count += 1;\n         }});\n          \n        if (count == 2){\n\n        \tthis.generateShip();\n        }\n\n        else {\n  \n          shipLengths.push(shipLength);\n          this.setState({shipLengths: shipLengths});\n          this.generateVertical(shipLength, shipStart);\n\n        }\n         \n\n\n       \t}\n\n       \telse {\n\n        if (shipLengths.indexOf(shipLength) > -1){\n       \t\tthis.generateShip();\n       \t}\n\n       \telse {\n\n       \tshipLengths.push(shipLength);\n       \tthis.setState({shipLengths: shipLengths});\n       \t// add a ship \n       \tthis.generateVertical(shipLength, shipStart);\n\n\n       \t}\n\n       \t}\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n}\n\n\n \n\n\n\n\n\n\n\n\n\n     // generate random number between 1 and 100, inclusive: var randNum = ...\n// if randNum + ((10*length) - (10)) > 100: build ship up\n// var verticalShip = [];               \n// for (var i = 0; i < length; i++ ) { if (i=0){ verticalShip.append(randNum)} else{  randNum = randNum - 10 verticalShip.append(randNum)       }           }\n// same for building the ship down, except randNum = randNum + 10\n// check that none of the generated numbers are in the current position\n// const shipPositions = this.state.shipPositions.slice();\n// for (var i = 0; i < verticalShip.length; i++){ if shipPositions.index(verticalShip[i]) > -1} this.generateVertical(length); else{\n// for (var i= 0; i < verticalShip....){shipPositions.append(verticalShip[i])}\n  \n\n\n\n  render() {\n    return (\n      <div>\n      {this.state.shipLengths}\n   \n        <button onClick={this.generateShip}>\n          Click me\n        </button>\n      </div>\n    );\n  }\n}\n\n\nexport default BattleshipBoard;"]},"metadata":{},"sourceType":"module"}